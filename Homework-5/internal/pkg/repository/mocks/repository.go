// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source ./repository.go -destination=./mocks/repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "homework-3/internal/pkg/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPvzRepo is a mock of PvzRepo interface.
type MockPvzRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPvzRepoMockRecorder
}

// MockPvzRepoMockRecorder is the mock recorder for MockPvzRepo.
type MockPvzRepoMockRecorder struct {
	mock *MockPvzRepo
}

// NewMockPvzRepo creates a new mock instance.
func NewMockPvzRepo(ctrl *gomock.Controller) *MockPvzRepo {
	mock := &MockPvzRepo{ctrl: ctrl}
	mock.recorder = &MockPvzRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzRepo) EXPECT() *MockPvzRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPvzRepo) Add(ctx context.Context, pvz *repository.Pvz) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, pvz)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPvzRepoMockRecorder) Add(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPvzRepo)(nil).Add), ctx, pvz)
}

// DeleteByID mocks base method.
func (m *MockPvzRepo) DeleteByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPvzRepoMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPvzRepo)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockPvzRepo) GetByID(ctx context.Context, id int64) (*repository.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repository.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPvzRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPvzRepo)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockPvzRepo) Update(ctx context.Context, pvz *repository.Pvz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPvzRepoMockRecorder) Update(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPvzRepo)(nil).Update), ctx, pvz)
}
