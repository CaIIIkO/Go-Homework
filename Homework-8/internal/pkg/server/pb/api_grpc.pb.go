// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PVZServiceClient is the client API for PVZService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZServiceClient interface {
	AddPvz(ctx context.Context, in *AddPvzRequest, opts ...grpc.CallOption) (*AddPvzResponse, error)
	GetPvzByID(ctx context.Context, in *GetPvzByIDRequest, opts ...grpc.CallOption) (*GetPvzByIDResponse, error)
	UpdatePvz(ctx context.Context, in *UpdatePvzRequest, opts ...grpc.CallOption) (*UpdatePvzResponse, error)
	DeletePvzByID(ctx context.Context, in *DeletePvzByIDRequest, opts ...grpc.CallOption) (*DeletePvzByIDResponse, error)
}

type pVZServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZServiceClient(cc grpc.ClientConnInterface) PVZServiceClient {
	return &pVZServiceClient{cc}
}

func (c *pVZServiceClient) AddPvz(ctx context.Context, in *AddPvzRequest, opts ...grpc.CallOption) (*AddPvzResponse, error) {
	out := new(AddPvzResponse)
	err := c.cc.Invoke(ctx, "/pvz.PVZService/AddPvz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GetPvzByID(ctx context.Context, in *GetPvzByIDRequest, opts ...grpc.CallOption) (*GetPvzByIDResponse, error) {
	out := new(GetPvzByIDResponse)
	err := c.cc.Invoke(ctx, "/pvz.PVZService/GetPvzByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) UpdatePvz(ctx context.Context, in *UpdatePvzRequest, opts ...grpc.CallOption) (*UpdatePvzResponse, error) {
	out := new(UpdatePvzResponse)
	err := c.cc.Invoke(ctx, "/pvz.PVZService/UpdatePvz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) DeletePvzByID(ctx context.Context, in *DeletePvzByIDRequest, opts ...grpc.CallOption) (*DeletePvzByIDResponse, error) {
	out := new(DeletePvzByIDResponse)
	err := c.cc.Invoke(ctx, "/pvz.PVZService/DeletePvzByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServiceServer is the server API for PVZService service.
// All implementations must embed UnimplementedPVZServiceServer
// for forward compatibility
type PVZServiceServer interface {
	AddPvz(context.Context, *AddPvzRequest) (*AddPvzResponse, error)
	GetPvzByID(context.Context, *GetPvzByIDRequest) (*GetPvzByIDResponse, error)
	UpdatePvz(context.Context, *UpdatePvzRequest) (*UpdatePvzResponse, error)
	DeletePvzByID(context.Context, *DeletePvzByIDRequest) (*DeletePvzByIDResponse, error)
	mustEmbedUnimplementedPVZServiceServer()
}

// UnimplementedPVZServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPVZServiceServer struct {
}

func (UnimplementedPVZServiceServer) AddPvz(context.Context, *AddPvzRequest) (*AddPvzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPvz not implemented")
}
func (UnimplementedPVZServiceServer) GetPvzByID(context.Context, *GetPvzByIDRequest) (*GetPvzByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPvzByID not implemented")
}
func (UnimplementedPVZServiceServer) UpdatePvz(context.Context, *UpdatePvzRequest) (*UpdatePvzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePvz not implemented")
}
func (UnimplementedPVZServiceServer) DeletePvzByID(context.Context, *DeletePvzByIDRequest) (*DeletePvzByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePvzByID not implemented")
}
func (UnimplementedPVZServiceServer) mustEmbedUnimplementedPVZServiceServer() {}

// UnsafePVZServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServiceServer will
// result in compilation errors.
type UnsafePVZServiceServer interface {
	mustEmbedUnimplementedPVZServiceServer()
}

func RegisterPVZServiceServer(s grpc.ServiceRegistrar, srv PVZServiceServer) {
	s.RegisterService(&PVZService_ServiceDesc, srv)
}

func _PVZService_AddPvz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPvzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).AddPvz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvz.PVZService/AddPvz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).AddPvz(ctx, req.(*AddPvzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GetPvzByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPvzByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GetPvzByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvz.PVZService/GetPvzByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GetPvzByID(ctx, req.(*GetPvzByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_UpdatePvz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePvzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).UpdatePvz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvz.PVZService/UpdatePvz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).UpdatePvz(ctx, req.(*UpdatePvzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_DeletePvzByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePvzByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).DeletePvzByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pvz.PVZService/DeletePvzByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).DeletePvzByID(ctx, req.(*DeletePvzByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZService_ServiceDesc is the grpc.ServiceDesc for PVZService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.PVZService",
	HandlerType: (*PVZServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPvz",
			Handler:    _PVZService_AddPvz_Handler,
		},
		{
			MethodName: "GetPvzByID",
			Handler:    _PVZService_GetPvzByID_Handler,
		},
		{
			MethodName: "UpdatePvz",
			Handler:    _PVZService_UpdatePvz_Handler,
		},
		{
			MethodName: "DeletePvzByID",
			Handler:    _PVZService_DeletePvzByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
